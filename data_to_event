from obspy.core.event import Catalog
from obspy.core.event import Event
from obspy.core.event import Origin
from obspy.core.event import Pick
from obspy.core.event import Magnitude
from obspy.core.event import *


def text_to_event(textfile='nlloc.hyp'):
    """
    rewriting a textdocument with given form into an event file

    :type textfile: str
    :param textfile: String containing the filename/path
    :return: a catalog object with name 'cat'
    """

    #define the catalog structure
    cat = Catalog()

    event = Event()
    event.resource_id = ResourceIdentifier()
    event.creation_info = CreationInfo()

    picks = Pick()

    focal_mechanism = FocalMechanism()
    focal_mechanism.resource_id = ResourceIdentifier()
    focal_mechanism.triggering_origin_id = ResourceIdentifier()
    focal_mechanism.nodal_plane = NodalPlanes()
    focal_mechanism.station_polarity_count = 9999
    focal_mechanism.method_id = ResourceIdentifier()

    origin = Origin()
    origin.resid = ResourceIdentifier()
    origin.time = UTCDateTime()
    origin.quality = OriginQuality()
    origin.uncertainty = OriginUncertainty()
    arrival = Arrival()

    magnitudes = Magnitude()
    magnitudes.resource_id = ResourceIdentifier()
    magnitudes.mag = 9999
    magnitudes.magnitude_type = '?'
    magnitudes.method_id = ResourceIdentifier()

    #read file
    with open(textfile) as file:
        #split file
        lines = file.read().lower().strip().splitlines()
        in_pick_block = False
        for line in lines:
            if line.startswith('phase'):
                in_pick_block = True
                continue
            elif line.startswith('end_phase'):
                in_pick_block = False
                continue

            if in_pick_block is True:
                pick = line.split()

                #create a new arrival
                origin.arrivals.append(arrival)
                #write informations in the arrival specific part of the event
                arrival.resource_id = ResourceIdentifier()
                arrival.pick_id = ResourceIdentifier()
                arrival.phase = pick[4]
                arrival.azimuth = float(pick[22])
                arrival.distance = float(pick[21])
                arrival.time_residual = float(pick[16])
                arrival.time_weight = float(pick[17])

                #create a new pick
                picks = Pick()
                #write inforamtions in the pick specific part of the event
                picks.resource_id = ResourceIdentifier()
                #create time part
                picks.time = UTCDateTime()
                #write timeinformations
                time_raw2 = map(int, [pick[6][0:4], pick[6][4:6], pick[6][6:8],
                pick[7][0:2], pick[7][2:4], pick[8][0:2], pick[8][3:7]])
                time = UTCDateTime(time_raw2[0], time_raw2[1], time_raw2[2],
                time_raw2[3], time_raw2[4], time_raw2[5], time_raw2[6])
                #create Waveform part
                picks.waveform_id = WaveformStreamID()
                #write waveforminformations
                picks.waveform_id.network_code = '?'
                picks.waveform_id.station_code = pick[0]
                picks.waveform_id.channel_code = '?'
                picks.phase_hint = pick[4]

text_to_event('nlloc.hyp')
